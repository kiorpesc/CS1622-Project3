import java_cup.runtime.*;
import syntaxtree.*;

parser code
{:
    MiniJavaLexer _lexer;
    public MiniJavaParser(MiniJavaLexer lex) { super(lex); _lexer = lex; }
    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        System.err.println("Parse error at line " + cur_token.left + ", column " + cur_token.right);
    }
:};

/* Preliminaries to set up and use the scanner.  */
scan with {: return _lexer.next_token(); :};

terminal AND, ASSIGNMENT, BOOLEAN, CLASS, COMMA, DEREFERENCE, ELSE;
terminal EXTENDS, FALSE, IF, INT, LEFT_BRACE, LEFT_BRACKET, LEFT_PAREN;
terminal LESS_THAN, MAIN, MINUS, MULTIPLY, NEW, NOT, PLUS, PUBLIC, RETURN;
terminal RIGHT_BRACE, RIGHT_BRACKET, RIGHT_PAREN, SEMICOLON, STATIC, THIS;
terminal TRUE, VOID, WHILE, PRINT, LENGTH, STRING;

terminal String IDENTIFIER;
terminal Integer INT_LITERAL;

non terminal Program        program;
non terminal MainClass      main_class;
non terminal ClassDeclList  class_decl_list;
non terminal ClassDecl      class_decl;
non terminal VarDeclList    var_decl_list;
non terminal MethodDeclList method_decl_list;
non terminal VarDecl        var_decl;
non terminal MethodDecl     method_decl;
non terminal FormalList     formal_list;
non terminal FormalList     formal_rest_list;
non terminal Type           type;
non terminal StatementList  statement_list;
non terminal Statement      statement;
non terminal Exp            expression;
non terminal ExpList        expression_list;
non terminal ExpList        expression_rest_list;
non terminal Identifier     identifier;

precedence left AND;
precedence left NOT;

precedence left LESS_THAN;

precedence left PLUS, MINUS;
precedence left MULTIPLY;

start with program;

program ::=
        main_class:mc class_decl_list:cdl
        {: RESULT = new Program(mc, cdl); :}
    ;

main_class ::=
        CLASS identifier:class_id LEFT_BRACE PUBLIC STATIC VOID MAIN LEFT_PAREN STRING LEFT_BRACKET RIGHT_BRACKET identifier:arg_id RIGHT_PAREN LEFT_BRACE statement:s RIGHT_BRACE RIGHT_BRACE
        {: RESULT = new MainClass(class_id, arg_id, s, class_id.getLine(), class_id.getColumn()); :}
    ;

class_decl_list ::=
        class_decl_list:rest class_decl:cd
        {: rest.addElement(cd); RESULT = rest; :}
    |
        {: RESULT = new ClassDeclList(); :}
    ;

class_decl ::=
        CLASS identifier:id LEFT_BRACE var_decl_list:vars method_decl_list:methods RIGHT_BRACE
        {: RESULT = new ClassDeclSimple(id, vars, methods, id.getLine(), id.getColumn()); :}
    |   CLASS identifier:id EXTENDS identifier:parent LEFT_BRACE var_decl_list:vars method_decl_list:methods RIGHT_BRACE
        {: RESULT = new ClassDeclExtends(id, parent, vars, methods, id.getLine(), id.getColumn()); :}
    |   error RIGHT_BRACE
    ;

var_decl_list ::=
        var_decl_list:rest var_decl:vd
        {: rest.addElement(vd); RESULT = rest; :}
    |
        {: RESULT = new VarDeclList(); :}
    ;

var_decl ::=
        type:t identifier:id SEMICOLON
        {: RESULT = new VarDecl(t, id, t.getLine(), t.getColumn()); :}
    |   type:t error SEMICOLON
    ;

method_decl_list ::=
        method_decl:md method_decl_list:rest
        {: rest.addFront(md); RESULT = rest; :}
    |
        {: RESULT = new MethodDeclList(); :}
    ;

method_decl ::=
        PUBLIC type:ret identifier:id LEFT_PAREN formal_list:args RIGHT_PAREN LEFT_BRACE var_decl_list:vars statement_list:sl RETURN expression:e SEMICOLON RIGHT_BRACE
        {: RESULT = new MethodDecl(ret, id, args, vars, sl, e, ret.getLine(), ret.getColumn()); :}
    |   PUBLIC type:ret identifier:id LEFT_PAREN error RIGHT_PAREN LEFT_BRACE var_decl_list:vars statement_list:sl RETURN expression:e SEMICOLON RIGHT_BRACE
        {: RESULT = new MethodDecl(ret, id, null, vars, sl, e, ret.getLine(), ret.getColumn()); :}
    |
        error RIGHT_BRACE
    ;

formal_list ::=
        type:t identifier:id formal_rest_list:l
        {: l.addFront(new Formal(t, id, t.getLine(), t.getColumn())); RESULT = l; :}
    |
        {: RESULT = new FormalList(); :}
    ;

formal_rest_list ::=
        formal_rest_list:rest COMMA type:t identifier:id
        {: rest.addElement(new Formal(t, id, t.getLine(), t.getColumn())); RESULT = rest; :}
    |
        {: RESULT = new FormalList(); :}
    ;

type ::=
        INT:i LEFT_BRACKET RIGHT_BRACKET
        {: RESULT = new IntArrayType(ileft, iright); :}
    |   BOOLEAN:b
        {: RESULT = new BooleanType(bleft, bright); :}
    |   INT:i
        {: RESULT = new IntegerType(ileft, iright); :}
    |   IDENTIFIER:id
        {: RESULT = new IdentifierType(id, idleft, idright); :}
    ;

statement_list ::=
        statement:s statement_list:rest
        {: rest.addFront(s); RESULT = rest; :}
    |
        {: RESULT = new StatementList(); :}
    ;

statement ::=
        LEFT_BRACE statement_list:list RIGHT_BRACE
        {: RESULT = new Block(list, list.getLine(), list.getColumn()); :}
    |   IF:i LEFT_PAREN expression:e RIGHT_PAREN statement:s1 ELSE statement:s2
        {: RESULT = new If(e, s1, s2, ileft, iright); :}
    |   WHILE LEFT_PAREN expression:e RIGHT_PAREN statement:s
        {: RESULT = new While(e, s); :}
    |   PRINT LEFT_PAREN expression:e RIGHT_PAREN SEMICOLON
        {: RESULT = new Print(e); :}
    |   identifier:id ASSIGNMENT expression:e SEMICOLON
        {: RESULT = new Assign(id, e); :}
    |   identifier:id LEFT_BRACKET expression:sub RIGHT_BRACKET ASSIGNMENT expression:rhs SEMICOLON
        {: RESULT = new ArrayAssign(id, sub, rhs); :}
    |   error SEMICOLON
    ;

expression ::=
        expression:l AND expression:r
        {: RESULT = new And(l, r); :}
    |
        expression:l LESS_THAN expression:r
        {: RESULT = new LessThan(l, r); :}
    |
        expression:l PLUS expression:r
        {: RESULT = new Plus(l, r); :}
    |
        expression:l MINUS expression:r
        {: RESULT = new Minus(l, r); :}
    |
        expression:l MULTIPLY expression:r
        {: RESULT = new Times(l, r); :}
    |
        expression:a LEFT_BRACKET expression:sub RIGHT_BRACKET
        {: RESULT = new ArrayLookup(a, sub); :}
    |
        expression:a DEREFERENCE LENGTH
        {: RESULT = new ArrayLength(a); :}
    |
        expression:a DEREFERENCE identifier:i LEFT_PAREN expression_list:l RIGHT_PAREN
        {: RESULT = new Call(a, i, l); :}
    |
        expression:a DEREFERENCE identifier:i LEFT_PAREN error RIGHT_PAREN
        {: RESULT = new Call(a, i, null); :}
    |
        INT_LITERAL:i
        {: RESULT = new IntegerLiteral(i); :}
    |
        TRUE
        {: RESULT = new True(); :}
    |
        FALSE
        {: RESULT = new False(); :}
    |
        IDENTIFIER:id
        {: RESULT = new IdentifierExp(id); :}
    |
        THIS
        {: RESULT = new This(); :}
    |
        NEW INT LEFT_BRACKET expression:e RIGHT_BRACKET
        {: RESULT = new NewArray(e); :}
    |
        NEW identifier:i LEFT_PAREN RIGHT_PAREN
        {: RESULT = new NewObject(i); :}
    |
        NOT expression:e
        {: RESULT = new Not(e); :}
    |
        LEFT_PAREN expression:e RIGHT_PAREN
        {: RESULT = e; :}
    ;

expression_list ::=
        expression:e expression_rest_list:r
        {: r.addFront(e); RESULT = r; :}
    |
        {: RESULT = new ExpList(); :}
    ;

expression_rest_list ::=
        expression_rest_list:rest COMMA expression:e
        {: rest.addElement(e); RESULT = rest; :}
    |
        {: RESULT = new ExpList(); :}
    ;

identifier ::=
        IDENTIFIER:id
        {: RESULT = new Identifier(id); :}
    ;
