
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 30 00:32:41 EDT 2015
//----------------------------------------------------

import java_cup.runtime.*;
import syntaxtree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 30 00:32:41 EDT 2015
  */
public class MiniJavaParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MiniJavaParser() {super();}

  /** Constructor which sets the default scanner. */
  public MiniJavaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiniJavaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\004\000\002\003" +
    "\023\000\002\004\004\000\002\004\002\000\002\005\010" +
    "\000\002\005\012\000\002\005\004\000\002\006\004\000" +
    "\002\006\002\000\002\010\005\000\002\010\005\000\002" +
    "\007\004\000\002\007\002\000\002\011\017\000\002\011" +
    "\017\000\002\011\004\000\002\012\005\000\002\012\002" +
    "\000\002\013\006\000\002\013\002\000\002\014\005\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\004\000\002\015\002\000\002\016\005\000\002\016" +
    "\011\000\002\016\007\000\002\016\007\000\002\016\006" +
    "\000\002\016\011\000\002\016\004\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\006\000\002\017\005\000\002\017" +
    "\010\000\002\017\010\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\007\000\002\017\006\000\002\017\004\000\002" +
    "\017\005\000\002\020\004\000\002\020\002\000\002\021" +
    "\005\000\002\021\002\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\004\007\005\001\002\000\004\002\241\001" +
    "\002\000\004\047\014\001\002\000\010\002\ufffd\003\ufffd" +
    "\007\ufffd\001\002\000\010\002\000\003\010\007\012\001" +
    "\002\000\004\033\220\001\002\000\010\002\ufffe\003\ufffe" +
    "\007\ufffe\001\002\000\004\047\014\001\002\000\006\013" +
    "\015\017\016\001\002\000\022\005\uffc9\010\uffc9\013\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\035\uffc9\036\uffc9\001\002\000" +
    "\004\047\014\001\002\000\016\003\ufff8\006\ufff8\016\ufff8" +
    "\031\ufff8\033\ufff8\047\ufff8\001\002\000\016\003\025\006" +
    "\022\016\020\031\021\033\ufff4\047\026\001\002\000\010" +
    "\003\uffea\020\211\047\uffea\001\002\000\010\006\022\016" +
    "\020\047\026\001\002\000\006\003\uffeb\047\uffeb\001\002" +
    "\000\004\033\037\001\002\000\006\003\033\047\014\001" +
    "\002\000\004\033\032\001\002\000\006\003\uffe9\047\uffe9" +
    "\001\002\000\010\003\025\031\021\033\ufff4\001\002\000" +
    "\030\003\ufff9\006\ufff9\015\ufff9\016\ufff9\017\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\043\ufff9\044\ufff9\047\ufff9\001\002\000" +
    "\004\033\ufff5\001\002\000\010\003\ufff1\031\ufff1\033\ufff1" +
    "\001\002\000\004\036\036\001\002\000\004\036\035\001" +
    "\002\000\030\003\ufff7\006\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\031\ufff7\032\ufff7\033\ufff7\043\ufff7\044\ufff7\047\ufff7\001" +
    "\002\000\030\003\ufff6\006\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\043\ufff6\044\ufff6\047\ufff6\001" +
    "\002\000\010\002\ufffc\003\ufffc\007\ufffc\001\002\000\004" +
    "\047\014\001\002\000\004\021\042\001\002\000\014\003" +
    "\044\006\022\016\020\035\uffef\047\026\001\002\000\004" +
    "\035\201\001\002\000\004\035\053\001\002\000\004\047" +
    "\014\001\002\000\006\010\uffed\035\uffed\001\002\000\006" +
    "\010\050\035\ufff0\001\002\000\010\006\022\016\020\047" +
    "\026\001\002\000\004\047\014\001\002\000\006\010\uffee" +
    "\035\uffee\001\002\000\004\017\054\001\002\000\024\003" +
    "\ufff8\006\ufff8\015\ufff8\016\ufff8\017\ufff8\032\ufff8\043\ufff8" +
    "\044\ufff8\047\ufff8\001\002\000\024\003\062\006\022\015" +
    "\057\016\020\017\065\032\uffe7\043\056\044\063\047\064" +
    "\001\002\000\004\021\175\001\002\000\004\021\167\001" +
    "\002\000\006\005\156\020\157\001\002\000\022\003\062" +
    "\015\057\017\065\032\uffe7\033\uffe7\043\056\044\063\047" +
    "\014\001\002\000\004\036\154\001\002\000\004\021\150" +
    "\001\002\000\012\003\uffe9\005\uffc9\020\uffc9\047\uffe9\001" +
    "\002\000\020\003\062\015\057\017\065\033\uffe7\043\056" +
    "\044\063\047\014\001\002\000\004\032\067\001\002\000" +
    "\022\014\073\021\075\026\070\027\100\040\076\041\071" +
    "\047\077\050\072\001\002\000\006\016\140\047\014\001" +
    "\002\000\030\004\uffd5\010\uffd5\011\uffd5\020\uffd5\022\uffd5" +
    "\024\uffd5\025\uffd5\030\uffd5\034\uffd5\035\uffd5\036\uffd5\001" +
    "\002\000\030\004\uffd6\010\uffd6\011\uffd6\020\uffd6\022\uffd6" +
    "\024\uffd6\025\uffd6\030\uffd6\034\uffd6\035\uffd6\036\uffd6\001" +
    "\002\000\030\004\uffd4\010\uffd4\011\uffd4\020\uffd4\022\uffd4" +
    "\024\uffd4\025\uffd4\030\uffd4\034\uffd4\035\uffd4\036\uffd4\001" +
    "\002\000\022\004\103\011\105\020\106\022\102\024\107" +
    "\025\110\030\104\036\135\001\002\000\022\014\073\021" +
    "\075\026\070\027\100\040\076\041\071\047\077\050\072" +
    "\001\002\000\030\004\uffd2\010\uffd2\011\uffd2\020\uffd2\022" +
    "\uffd2\024\uffd2\025\uffd2\030\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\001\002\000\030\004\uffd3\010\uffd3\011\uffd3\020\uffd3\022" +
    "\uffd3\024\uffd3\025\uffd3\030\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\001\002\000\022\014\073\021\075\026\070\027\100\040" +
    "\076\041\071\047\077\050\072\001\002\000\030\004\uffcf" +
    "\010\uffcf\011\uffcf\020\uffcf\022\102\024\107\025\110\030" +
    "\104\034\uffcf\035\uffcf\036\uffcf\001\002\000\022\014\073" +
    "\021\075\026\070\027\100\040\076\041\071\047\077\050" +
    "\072\001\002\000\022\014\073\021\075\026\070\027\100" +
    "\040\076\041\071\047\077\050\072\001\002\000\022\014" +
    "\073\021\075\026\070\027\100\040\076\041\071\047\077" +
    "\050\072\001\002\000\006\045\116\047\014\001\002\000" +
    "\022\014\073\021\075\026\070\027\100\040\076\041\071" +
    "\047\077\050\072\001\002\000\022\014\073\021\075\026" +
    "\070\027\100\040\076\041\071\047\077\050\072\001\002" +
    "\000\022\014\073\021\075\026\070\027\100\040\076\041" +
    "\071\047\077\050\072\001\002\000\030\004\uffdb\010\uffdb" +
    "\011\uffdb\020\uffdb\022\uffdb\024\uffdb\025\uffdb\030\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\001\002\000\030\004\uffdc\010\uffdc" +
    "\011\uffdc\020\uffdc\022\uffdc\024\uffdc\025\110\030\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\001\002\000\022\004\103\011\105" +
    "\020\106\022\102\024\107\025\110\030\104\034\114\001" +
    "\002\000\030\004\uffda\010\uffda\011\uffda\020\uffda\022\uffda" +
    "\024\uffda\025\uffda\030\uffda\034\uffda\035\uffda\036\uffda\001" +
    "\002\000\004\021\117\001\002\000\030\004\uffd9\010\uffd9" +
    "\011\uffd9\020\uffd9\022\uffd9\024\uffd9\025\uffd9\030\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\001\002\000\026\003\121\014\073" +
    "\021\075\026\070\027\100\035\uffcc\040\076\041\071\047" +
    "\077\050\072\001\002\000\024\004\103\010\uffca\011\105" +
    "\020\106\022\102\024\107\025\110\030\104\035\uffca\001" +
    "\002\000\004\035\124\001\002\000\004\035\123\001\002" +
    "\000\030\004\uffd8\010\uffd8\011\uffd8\020\uffd8\022\uffd8\024" +
    "\uffd8\025\uffd8\030\uffd8\034\uffd8\035\uffd8\036\uffd8\001\002" +
    "\000\030\004\uffd7\010\uffd7\011\uffd7\020\uffd7\022\uffd7\024" +
    "\uffd7\025\uffd7\030\uffd7\034\uffd7\035\uffd7\036\uffd7\001\002" +
    "\000\006\010\126\035\uffcd\001\002\000\022\014\073\021" +
    "\075\026\070\027\100\040\076\041\071\047\077\050\072" +
    "\001\002\000\024\004\103\010\uffcb\011\105\020\106\022" +
    "\102\024\107\025\110\030\104\035\uffcb\001\002\000\030" +
    "\004\uffdd\010\uffdd\011\uffdd\020\uffdd\022\uffdd\024\uffdd\025" +
    "\110\030\uffdd\034\uffdd\035\uffdd\036\uffdd\001\002\000\030" +
    "\004\uffdf\010\uffdf\011\uffdf\020\uffdf\022\102\024\107\025" +
    "\110\030\104\034\uffdf\035\uffdf\036\uffdf\001\002\000\030" +
    "\004\uffde\010\uffde\011\uffde\020\uffde\022\uffde\024\107\025" +
    "\110\030\104\034\uffde\035\uffde\036\uffde\001\002\000\022" +
    "\004\103\011\105\020\106\022\102\024\107\025\110\030" +
    "\104\035\134\001\002\000\030\004\uffce\010\uffce\011\uffce" +
    "\020\uffce\022\uffce\024\uffce\025\uffce\030\uffce\034\uffce\035" +
    "\uffce\036\uffce\001\002\000\004\033\136\001\002\000\010" +
    "\003\ufff2\031\ufff2\033\ufff2\001\002\000\004\021\144\001" +
    "\002\000\004\020\141\001\002\000\022\014\073\021\075" +
    "\026\070\027\100\040\076\041\071\047\077\050\072\001" +
    "\002\000\022\004\103\011\105\020\106\022\102\024\107" +
    "\025\110\030\104\034\143\001\002\000\030\004\uffd1\010" +
    "\uffd1\011\uffd1\020\uffd1\022\uffd1\024\uffd1\025\uffd1\030\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\001\002\000\004\035\145\001" +
    "\002\000\030\004\uffd0\010\uffd0\011\uffd0\020\uffd0\022\uffd0" +
    "\024\uffd0\025\uffd0\030\uffd0\034\uffd0\035\uffd0\036\uffd0\001" +
    "\002\000\004\033\147\001\002\000\024\003\uffe6\012\uffe6" +
    "\015\uffe6\017\uffe6\032\uffe6\033\uffe6\043\uffe6\044\uffe6\047" +
    "\uffe6\001\002\000\022\014\073\021\075\026\070\027\100" +
    "\040\076\041\071\047\077\050\072\001\002\000\022\004" +
    "\103\011\105\020\106\022\102\024\107\025\110\030\104" +
    "\035\152\001\002\000\004\036\153\001\002\000\024\003" +
    "\uffe3\012\uffe3\015\uffe3\017\uffe3\032\uffe3\033\uffe3\043\uffe3" +
    "\044\uffe3\047\uffe3\001\002\000\024\003\uffe0\012\uffe0\015" +
    "\uffe0\017\uffe0\032\uffe0\033\uffe0\043\uffe0\044\uffe0\047\uffe0" +
    "\001\002\000\006\032\uffe8\033\uffe8\001\002\000\022\014" +
    "\073\021\075\026\070\027\100\040\076\041\071\047\077" +
    "\050\072\001\002\000\022\014\073\021\075\026\070\027" +
    "\100\040\076\041\071\047\077\050\072\001\002\000\022" +
    "\004\103\011\105\020\106\022\102\024\107\025\110\030" +
    "\104\034\161\001\002\000\004\005\162\001\002\000\022" +
    "\014\073\021\075\026\070\027\100\040\076\041\071\047" +
    "\077\050\072\001\002\000\022\004\103\011\105\020\106" +
    "\022\102\024\107\025\110\030\104\036\164\001\002\000" +
    "\024\003\uffe1\012\uffe1\015\uffe1\017\uffe1\032\uffe1\033\uffe1" +
    "\043\uffe1\044\uffe1\047\uffe1\001\002\000\022\004\103\011" +
    "\105\020\106\022\102\024\107\025\110\030\104\036\166" +
    "\001\002\000\024\003\uffe2\012\uffe2\015\uffe2\017\uffe2\032" +
    "\uffe2\033\uffe2\043\uffe2\044\uffe2\047\uffe2\001\002\000\022" +
    "\014\073\021\075\026\070\027\100\040\076\041\071\047" +
    "\077\050\072\001\002\000\022\004\103\011\105\020\106" +
    "\022\102\024\107\025\110\030\104\035\171\001\002\000" +
    "\016\003\062\015\057\017\065\043\056\044\063\047\014" +
    "\001\002\000\004\012\173\001\002\000\016\003\062\015" +
    "\057\017\065\043\056\044\063\047\014\001\002\000\024" +
    "\003\uffe5\012\uffe5\015\uffe5\017\uffe5\032\uffe5\033\uffe5\043" +
    "\uffe5\044\uffe5\047\uffe5\001\002\000\022\014\073\021\075" +
    "\026\070\027\100\040\076\041\071\047\077\050\072\001" +
    "\002\000\022\004\103\011\105\020\106\022\102\024\107" +
    "\025\110\030\104\035\177\001\002\000\016\003\062\015" +
    "\057\017\065\043\056\044\063\047\014\001\002\000\024" +
    "\003\uffe4\012\uffe4\015\uffe4\017\uffe4\032\uffe4\033\uffe4\043" +
    "\uffe4\044\uffe4\047\uffe4\001\002\000\004\017\202\001\002" +
    "\000\024\003\ufff8\006\ufff8\015\ufff8\016\ufff8\017\ufff8\032" +
    "\ufff8\043\ufff8\044\ufff8\047\ufff8\001\002\000\024\003\062" +
    "\006\022\015\057\016\020\017\065\032\uffe7\043\056\044" +
    "\063\047\064\001\002\000\004\032\205\001\002\000\022" +
    "\014\073\021\075\026\070\027\100\040\076\041\071\047" +
    "\077\050\072\001\002\000\022\004\103\011\105\020\106" +
    "\022\102\024\107\025\110\030\104\036\207\001\002\000" +
    "\004\033\210\001\002\000\010\003\ufff3\031\ufff3\033\ufff3" +
    "\001\002\000\004\034\212\001\002\000\006\003\uffec\047" +
    "\uffec\001\002\000\004\017\214\001\002\000\016\003\ufff8" +
    "\006\ufff8\016\ufff8\031\ufff8\033\ufff8\047\ufff8\001\002\000" +
    "\016\003\025\006\022\016\020\031\021\033\ufff4\047\026" +
    "\001\002\000\004\033\217\001\002\000\010\002\ufffb\003" +
    "\ufffb\007\ufffb\001\002\000\010\002\ufffa\003\ufffa\007\ufffa" +
    "\001\002\000\004\017\222\001\002\000\004\031\223\001" +
    "\002\000\004\037\224\001\002\000\004\042\225\001\002" +
    "\000\004\023\226\001\002\000\004\021\227\001\002\000" +
    "\004\046\230\001\002\000\004\020\231\001\002\000\004" +
    "\034\232\001\002\000\004\047\014\001\002\000\004\035" +
    "\234\001\002\000\004\017\235\001\002\000\016\003\062" +
    "\015\057\017\065\043\056\044\063\047\014\001\002\000" +
    "\004\033\237\001\002\000\004\033\240\001\002\000\010" +
    "\002\uffff\003\uffff\007\uffff\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\004\022\220\001\001\000\004\004\006\001\001" +
    "\000\004\005\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\212\001\001\000\004\006\016\001" +
    "\001\000\012\007\022\010\027\011\026\014\023\001\001" +
    "\000\002\001\001\000\004\014\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\030\011\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\040\001\001" +
    "\000\002\001\001\000\006\012\042\014\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\045\001\001" +
    "\000\004\013\046\001\001\000\002\001\001\000\004\014" +
    "\050\001\001\000\004\022\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\054\001\001\000\014\010" +
    "\027\014\023\015\065\016\060\022\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\154\016\060\022\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\145\016\060\022" +
    "\057\001\001\000\002\001\001\000\004\017\073\001\001" +
    "\000\004\022\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\100\001\001\000\002\001\001\000\004\017\131\001\001" +
    "\000\004\017\130\001\001\000\004\017\127\001\001\000" +
    "\004\022\114\001\001\000\004\017\112\001\001\000\004" +
    "\017\111\001\001\000\004\017\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\117\020" +
    "\121\001\001\000\004\021\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\164\001\001\000\004\017\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\167\001\001\000\002\001" +
    "\001\000\006\016\171\022\057\001\001\000\002\001\001" +
    "\000\006\016\173\022\057\001\001\000\002\001\001\000" +
    "\004\017\175\001\001\000\002\001\001\000\006\016\177" +
    "\022\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\202\001\001\000\014\010\027\014\023\015\203" +
    "\016\060\022\057\001\001\000\002\001\001\000\004\017" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\214\001\001\000\012\007\215\010\027" +
    "\011\026\014\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\235\022\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiniJavaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiniJavaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiniJavaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return _lexer.next_token(); 
    }


    MiniJavaLexer _lexer;
    public MiniJavaParser(MiniJavaLexer lex) { super(lex); _lexer = lex; }
    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        System.err.println("Parse error at line " + cur_token.left + ", column " + cur_token.right);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MiniJavaParser$actions {
  private final MiniJavaParser parser;

  /** Constructor */
  CUP$MiniJavaParser$actions(MiniJavaParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MiniJavaParser$do_action(
    int                        CUP$MiniJavaParser$act_num,
    java_cup.runtime.lr_parser CUP$MiniJavaParser$parser,
    java.util.Stack            CUP$MiniJavaParser$stack,
    int                        CUP$MiniJavaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiniJavaParser$result;

      /* select the action based on the action number */
      switch (CUP$MiniJavaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new Identifier(id); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("identifier",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression_rest_list ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression_rest_list",15, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression_rest_list ::= expression_rest_list COMMA expression 
            {
              ExpList RESULT =null;
		int restleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int restright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		ExpList rest = (ExpList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 rest.addElement(e); RESULT = rest; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression_rest_list",15, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression_list ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression_list",14, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression_list ::= expression expression_rest_list 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ExpList r = (ExpList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 r.addFront(e); RESULT = r; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression_list",14, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= LEFT_PAREN expression RIGHT_PAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = e; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= NOT expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= NEW identifier LEFT_PAREN RIGHT_PAREN 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		 RESULT = new NewObject(i); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= NEW INT LEFT_BRACKET expression RIGHT_BRACKET 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new NewArray(e); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= THIS 
            {
              Exp RESULT =null;
		 RESULT = new This(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= IDENTIFIER 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new IdentifierExp(id); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = new False(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = new True(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= INT_LITERAL 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new IntegerLiteral(i); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression DEREFERENCE identifier LEFT_PAREN error RIGHT_PAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		 RESULT = new Call(a, i, null); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression DEREFERENCE identifier LEFT_PAREN expression_list RIGHT_PAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		ExpList l = (ExpList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new Call(a, i, l); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression DEREFERENCE LENGTH 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		 RESULT = new ArrayLength(a); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression LEFT_BRACKET expression RIGHT_BRACKET 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int subleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp sub = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new ArrayLookup(a, sub); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression MULTIPLY expression 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new Times(l, r); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression MINUS expression 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new Minus(l, r); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression PLUS expression 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new Plus(l, r); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression LESS_THAN expression 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new LessThan(l, r); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression AND expression 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new And(l, r); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= error SEMICOLON 
            {
              Statement RESULT =null;

              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= identifier LEFT_BRACKET expression RIGHT_BRACKET ASSIGNMENT expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).value;
		int subleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Exp sub = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp rhs = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new ArrayAssign(id, sub, rhs); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= identifier ASSIGNMENT expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new Assign(id, e); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= PRINT LEFT_PAREN expression RIGHT_PAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		 RESULT = new Print(e); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= WHILE LEFT_PAREN expression RIGHT_PAREN statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new While(e, s); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new If(e, s1, s2); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= LEFT_BRACE statement_list RIGHT_BRACE 
            {
              Statement RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		StatementList list = (StatementList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new Block(list); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement_list ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement_list",11, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement_list ::= statement statement_list 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int restright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		StatementList rest = (StatementList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 rest.addFront(s); RESULT = rest; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement_list",11, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new IdentifierType(id); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntegerType(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= INT LEFT_BRACKET RIGHT_BRACKET 
            {
              Type RESULT =null;
		 RESULT = new IntArrayType(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formal_rest_list ::= 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formal_rest_list",9, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formal_rest_list ::= formal_rest_list COMMA type identifier 
            {
              FormalList RESULT =null;
		int restleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int restright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		FormalList rest = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 rest.addElement(new Formal(t, id)); RESULT = rest; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formal_rest_list",9, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formal_list ::= 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formal_list",8, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formal_list ::= type identifier formal_rest_list 
            {
              FormalList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		FormalList l = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 l.addFront(new Formal(t, id)); RESULT = l; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formal_list",8, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method_decl ::= error RIGHT_BRACE 
            {
              MethodDecl RESULT =null;

              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("method_decl",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_decl ::= PUBLIC type identifier LEFT_PAREN error RIGHT_PAREN LEFT_BRACE var_decl_list statement_list RETURN expression SEMICOLON RIGHT_BRACE 
            {
              MethodDecl RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-11)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-11)).right;
		Type ret = (Type)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		VarDeclList vars = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		 RESULT = new MethodDecl(ret, id, null, vars, sl, e); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("method_decl",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-12)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_decl ::= PUBLIC type identifier LEFT_PAREN formal_list RIGHT_PAREN LEFT_BRACE var_decl_list statement_list RETURN expression SEMICOLON RIGHT_BRACE 
            {
              MethodDecl RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-11)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-11)).right;
		Type ret = (Type)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).right;
		FormalList args = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		VarDeclList vars = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		 RESULT = new MethodDecl(ret, id, args, vars, sl, e); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("method_decl",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-12)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_decl_list ::= 
            {
              MethodDeclList RESULT =null;
		 RESULT = new MethodDeclList(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("method_decl_list",5, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_decl_list ::= method_decl method_decl_list 
            {
              MethodDeclList RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MethodDecl md = (MethodDecl)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int restright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		MethodDeclList rest = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 rest.addFront(md); RESULT = rest; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("method_decl_list",5, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_decl ::= type error SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;

              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("var_decl",6, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_decl ::= type identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new VarDecl(t, id); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("var_decl",6, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_decl_list ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("var_decl_list",4, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_decl_list ::= var_decl_list var_decl 
            {
              VarDeclList RESULT =null;
		int restleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int restright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		VarDeclList rest = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 rest.addElement(vd); RESULT = rest; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("var_decl_list",4, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_decl ::= error RIGHT_BRACE 
            {
              ClassDecl RESULT =null;

              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("class_decl",3, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_decl ::= CLASS identifier EXTENDS identifier LEFT_BRACE var_decl_list method_decl_list RIGHT_BRACE 
            {
              ClassDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).value;
		int parentleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Identifier parent = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		VarDeclList vars = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MethodDeclList methods = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new ClassDeclExtends(id, parent, vars, methods); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("class_decl",3, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_decl ::= CLASS identifier LEFT_BRACE var_decl_list method_decl_list RIGHT_BRACE 
            {
              ClassDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		VarDeclList vars = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MethodDeclList methods = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new ClassDeclSimple(id, vars, methods); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("class_decl",3, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_decl_list ::= 
            {
              ClassDeclList RESULT =null;
		 RESULT = new ClassDeclList(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("class_decl_list",2, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_decl_list ::= class_decl_list class_decl 
            {
              ClassDeclList RESULT =null;
		int restleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int restright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		ClassDeclList rest = (ClassDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ClassDecl cd = (ClassDecl)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 rest.addElement(cd); RESULT = rest; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("class_decl_list",2, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_class ::= CLASS identifier LEFT_BRACE PUBLIC STATIC VOID MAIN LEFT_PAREN STRING LEFT_BRACKET RIGHT_BRACKET identifier RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE RIGHT_BRACE 
            {
              MainClass RESULT =null;
		int class_idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-15)).left;
		int class_idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-15)).right;
		Identifier class_id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-15)).value;
		int arg_idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int arg_idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		Identifier arg_id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		 RESULT = new MainClass(class_id, arg_id, s); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("main_class",1, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-16)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= main_class class_decl_list 
            {
              Program RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MainClass mc = (MainClass)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ClassDeclList cdl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new Program(mc, cdl); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		RESULT = start_val;
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiniJavaParser$parser.done_parsing();
          return CUP$MiniJavaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

